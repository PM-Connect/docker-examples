##
# Example .gitlab-ci.yml file for using multi stage docker builds and the testing/upload/deployment process.
#
# The idea behind this example is to build as many of the required images in parallel as possible, to then
# save those images to the ci for use in later tasks (such as testing and deployment).
#
# Each task in this ci file could be moved into gitlab includes as they all rely on environment variables.
##

# All of our builds run through docker, so we set docker as our base image.
image: docker:19

stages:
- build    # Build all images ready for testing/deployment here.
- test     # Test the build images and compiled code.
- upload   # Upload build production images to remote repositories.
- deploy   # Deploy the project.
- verify   # Verify that the deployment was successful.

variables:
  DOCKER_BUILDKIT: 1                              # As we're using docker 19+, enable buildkit for faster builds.
  REMOTE_BACKEND_REGISTRY: my-registry/backend    # Set the remote registry to save our backend image to.
  REMOTE_SERVER_REGISTRY: my-registry/server      # Set the remote registry to save our server image to.
  STAGING_APP_URL: http://my-staging-url          # Set the staging application url.
  LIVE_APP_URL: http://my-live-url                # Set the live application url.

services:
- docker:19-dind

# Before we start, set the APP_URL variable depending on which branch we're in. This is used in the verification tests.
before_script:
- if [[ "${CI_COMMIT_REF_NAME}" == "master" ]]; then export APP_URL=${LIVE_APP_URL}; else export APP_URL=${STAGING_APP_URL}; fi

  # Build the backend image ready for production usage.
build:backend:
  stage: build
  tags:
  - dind
  artifacts:
    expire_in: 7 days
    paths:
    - backend.tar
  script:
  - docker build --target backend --cache-from "${REMOTE_BACKEND_REGISTRY}" --tag "${CI_PROJECT_ID}-backend:${CI_COMMIT_SHORT_SHA}" .
  - docker save --output backend.tar "${CI_PROJECT_ID}-backend:${CI_COMMIT_SHORT_SHA}"

# Build the phpunit test image.
build:unit-tests:
  stage: build
  tags:
  - dind
  artifacts:
    expire_in: 7 days
    paths:
    - test.tar
  script:
  - docker build --target test --cache-from "${REMOTE_BACKEND_REGISTRY}" --tag "${CI_PROJECT_ID}-test:${CI_COMMIT_SHORT_SHA}" .
  - docker save --output test.tar "${CI_PROJECT_ID}-test:${CI_COMMIT_SHORT_SHA}"

# Build the server image and save it as a .tar artifact for use later on.
# We only build the server image here as it has no dependant stages.
# This means both builds can run in parallel.
build:server:
  stage: build
  tags:
  - dind
  artifacts:
    expire_in: 7 days
    paths:
    - server.tar
  script:
  - docker build --target server --cache-from "${REMOTE_SERVER_REGISTRY}" --tag "${CI_PROJECT_ID}-server:${CI_COMMIT_SHORT_SHA}" .
  - docker save --output server.tar "${CI_PROJECT_ID}-server:${CI_COMMIT_SHORT_SHA}"

# Build the browser test image and save it as a .tar artifact for use later on.
build:browser-tests:
  stage: build
  tags:
  - dind
  artifacts:
    expire_in: 7 days
    paths:
    - browser-tests.tar
  script:
  - docker build --target browser-tests --tag "${CI_PROJECT_ID}-browser-tests:${CI_COMMIT_SHORT_SHA}"
  - docker save --output browser-tests.tar "${CI_PROJECT_ID}-browser-tests:${CI_COMMIT_SHORT_SHA}"

# Build the api test image and save it as a .tar artifact for use later on.
build:api-tests:
  stage: build
  tags:
  - dind
  artifacts:
    expire_in: 7 days
    paths:
    - api-tests.tar
  script:
  - docker build --target api-tests --tag "${CI_PROJECT_ID}-api-tests:${CI_COMMIT_SHORT_SHA}"
  - docker save --output api-tests.tar "${CI_PROJECT_ID}-api-tests:${CI_COMMIT_SHORT_SHA}"

# Fetch the artifact from the backend and test build. This is done by specifying a dependency.
# We also set the git strategy to none to avoid cloning the repo. We do not need this as we have a fully built image with our code already inside.
# We only need the artifacts.
test:unit-tests:
  stage: test
  tags:
  - dind
  dependencies:
  - build:unit-tests
  variables:
    GIT_STRATEGY: none
  script:
  - docker load --input test.tar
  - docker run --rm -it "${CI_PROJECT_ID}-test:${CI_COMMIT_SHORT_SHA}"

# Fetch the browser tests artifact and load it into docker.
# Run the browser tests using the loaded image.
test:browser-tests:
  stage: test
  tags:
  - dind
  dependencies:
  - build:browser-tests
  variables:
    GIT_STRATEGY: none
  script:
  - docker load --input browser-tests.tar
  - docker run --rm -it "${CI_PROJECT_ID}-browser-tests:${CI_COMMIT_SHORT_SHA}"

# Fetch the api tests artifact and load it into docker.
# Run the api tests using the loaded image.
test:api-tests:
  stage: test
  tags:
  - dind
  dependencies:
  - build:api-tests
  variables:
    GIT_STRATEGY: none
  script:
  - docker load --input api-tests.tar
  - docker run --rm -it "${CI_PROJECT_ID}-api-tests:${CI_COMMIT_SHORT_SHA}"

# Upload the built images to our remote repo.
# Again, we set the git strategy to none as we only require the artifacts.
upload:images:
  stage: upload
  tags:
  - dind
  dependencies:
  - build:backend
  - build:server
  variables:
    GIT_STRATEGY: none
  script:
  - docker load --input backend.tar
  - docker load --input server.tar
  # - docker tag "${CI_PROJECT_ID}-server:${CI_COMMIT_SHORT_SHA}" "${REMOTE_SERVER_REGISTRY}:${CI_COMMIT_SHORT_SHA}"
  # - docker tag "${CI_PROJECT_ID}-backend:${CI_COMMIT_SHORT_SHA}" "${REMOTE_BACKEND_REGISTRY}:${CI_COMMIT_SHORT_SHA}"
  # - docker push "${REMOTE_SERVER_REGISTRY}:${CI_COMMIT_SHORT_SHA}"
  # - docker push "${REMOTE_BACKEND_REGISTRY}:${CI_COMMIT_SHORT_SHA}"

# Deploy our application to staging.
deploy:staging:
  stage: deploy
  image: alpine
  environment:
    name: staging
  only:
  - develop
  script:
  - echo "Deployed to staging!"

# Deploy our application to production.
deploy:production:
  stage: deploy
  image: alpine
  environment:
    name: production
  only:
  - master
  when: manual
  script:
  - echo "Deployed to production!"

# Fetch the browser tests artifact and load it into docker.
# Run the browser tests using the loaded image.
verify:browser-tests:
  stage: verify
  tags:
  - dind
  dependencies:
  - build:browser-tests
  variables:
    GIT_STRATEGY: none
  only:
  - develop
  - master
  script:
  - docker load --input browser-tests.tar
  - docker run --rm -it -e APP_URL "${CI_PROJECT_ID}-browser-tests:${CI_COMMIT_SHORT_SHA}"

# Fetch the api tests artifact and load it into docker.
# Run the api tests using the loaded image.
verify:api-tests:
  stage: verify
  tags:
  - dind
  dependencies:
  - build:api-tests
  variables:
    GIT_STRATEGY: none
  only:
  - develop
  - master
  script:
  - docker load --input api-tests.tar
  - docker run --rm -it -e APP_URL "${CI_PROJECT_ID}-api-tests:${CI_COMMIT_SHORT_SHA}"
